ARG IMAGE_NAME
FROM ${IMAGE_NAME}:11.3.0-runtime-ubuntu20.04 as base

ENV NV_CUDA_LIB_VERSION "11.3.0-1"

FROM base as base-amd64

ENV NV_CUDA_CUDART_DEV_VERSION 11.3.58-1
ENV NV_NVML_DEV_VERSION 11.3.58-1
ENV NV_LIBCUSPARSE_DEV_VERSION 11.5.0.58-1
ENV NV_LIBNPP_DEV_VERSION 11.3.3.44-1
ENV NV_LIBNPP_DEV_PACKAGE libnpp-dev-11-3=${NV_LIBNPP_DEV_VERSION}

ENV NV_LIBCUBLAS_DEV_VERSION 11.4.2.10064-1
ENV NV_LIBCUBLAS_DEV_PACKAGE_NAME libcublas-dev-11-3
ENV NV_LIBCUBLAS_DEV_PACKAGE ${NV_LIBCUBLAS_DEV_PACKAGE_NAME}=${NV_LIBCUBLAS_DEV_VERSION}

ENV NV_NVPROF_VERSION 11.3.58-1
ENV NV_NVPROF_DEV_PACKAGE cuda-nvprof-11-3=${NV_NVPROF_VERSION}

ENV NV_LIBNCCL_DEV_PACKAGE_NAME libnccl-dev
ENV NV_LIBNCCL_DEV_PACKAGE_VERSION 2.9.6-1
ENV NCCL_VERSION 2.9.6-1
ENV NV_LIBNCCL_DEV_PACKAGE ${NV_LIBNCCL_DEV_PACKAGE_NAME}=${NV_LIBNCCL_DEV_PACKAGE_VERSION}+cuda11.3

ARG TARGETARCH
FROM base-amd64

LABEL maintainer "NVIDIA CORPORATION <cudatools@nvidia.com>"

RUN apt-get update && apt-get install -y --no-install-recommends \
    libtinfo5 libncursesw5 \
    cuda-cudart-dev-11-3=${NV_CUDA_CUDART_DEV_VERSION} \
    cuda-command-line-tools-11-3=${NV_CUDA_LIB_VERSION} \
    cuda-minimal-build-11-3=${NV_CUDA_LIB_VERSION} \
    cuda-libraries-dev-11-3=${NV_CUDA_LIB_VERSION} \
    # cuda-nvml-dev-11-3=${NV_NVML_DEV_VERSION} \
    # ${NV_NVPROF_DEV_PACKAGE} \
    ${NV_LIBNPP_DEV_PACKAGE} \
    libcusparse-dev-11-3=${NV_LIBCUSPARSE_DEV_VERSION} \
    ${NV_LIBCUBLAS_DEV_PACKAGE} \
    ${NV_LIBNCCL_DEV_PACKAGE} \
    && rm -rf /var/lib/apt/lists/*

# Keep apt from auto upgrading the cublas and nccl packages. See https://gitlab.com/nvidia/container-images/cuda/-/issues/88
RUN apt-mark hold ${NV_LIBCUBLAS_DEV_PACKAGE_NAME} ${NV_LIBNCCL_DEV_PACKAGE_NAME}

ENV LIBRARY_PATH /usr/local/cuda/lib64/stubs


# FROM ${IMAGE_NAME}:11.6.0-base-ubuntu20.04 as base

# ENV NV_CUDA_LIB_VERSION 11.6.0-1

# FROM base as base-amd64

# ENV NV_NVTX_VERSION 11.6.55-1
# ENV NV_LIBNPP_VERSION 11.6.0.55-1
# ENV NV_LIBNPP_PACKAGE libnpp-11-6=${NV_LIBNPP_VERSION}
# ENV NV_LIBCUSPARSE_VERSION 11.7.1.55-1
# # ENV NV_NVML_VERSION 11.0.167-1

# ENV NV_LIBCUBLAS_VERSION 11.8.1.74-1
# ENV NV_LIBCUBLAS_PACKAGE_NAME libcublas-11-6
# ENV NV_LIBCUBLAS_PACKAGE ${NV_LIBCUBLAS_PACKAGE_NAME}=${NV_LIBCUBLAS_VERSION}

# # ENV NV_NVPROF_VERSION 11.0.221-1
# # ENV NV_NVPROF_DEV_PACKAGE cuda-nvprof-11-0=${NV_NVPROF_VERSION}

# ENV NV_LIBNCCL_PACKAGE_NAME libnccl2
# ENV NV_LIBNCCL_PACKAGE_VERSION 2.12.10-1
# ENV NCCL_VERSION 2.12.10-1
# ENV NV_LIBNCCL_PACKAGE ${NV_LIBNCCL_PACKAGE_NAME}=${NV_LIBNCCL_PACKAGE_VERSION}+cuda11.6

# ARG TARGETARCH
# FROM base-amd64
# LABEL maintainer "NVIDIA CORPORATION <cudatools@nvidia.com>"
# RUN apt-get update && apt-get install -y --no-install-recommends \
#     cuda-libraries-11-6=${NV_CUDA_LIB_VERSION} \
#     ${NV_LIBNPP_PACKAGE} \
#     cuda-nvtx-11-6=${NV_NVTX_VERSION} \
#     libcusparse-11-6=${NV_LIBCUSPARSE_VERSION} \
#     ${NV_LIBCUBLAS_PACKAGE} \
#     ${NV_LIBNCCL_PACKAGE} \
#     # libtinfo5 libncursesw5 \
#     # cuda-cudart-dev-11-6=${NV_CUDA_CUDART_DEV_VERSION} \
#     # cuda-command-line-tools-11-0=${NV_CUDA_LIB_VERSION} \
#     # cuda-minimal-build-11-0=${NV_CUDA_LIB_VERSION} \
#     # cuda-nvml-dev-11-6=${NV_NVML_DEV_VERSION} \
#     # cuda-nvprof-11-6=${NV_NVPROF_VERSION} \
#     && rm -rf /var/lib/apt/lists/*

# # Keep apt from auto upgrading the cublas and nccl packages. See https://gitlab.com/nvidia/container-images/cuda/-/issues/88
# RUN apt-mark hold ${NV_LIBCUBLAS_PACKAGE_NAME} ${NV_LIBNCCL_PACKAGE_NAME}

# ENV LIBRARY_PATH /usr/local/cuda/lib64/stubs

RUN APT_INSTALL="apt-get install -y --no-install-recommends" && \
    PIP_INSTALL="python -m pip --no-cache-dir install --upgrade" && \
    GIT_CLONE="git clone --depth 10" && \
    apt-get update && apt-get install -y --no-install-recommends &&\
     DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        build-essential \
        ca-certificates \
        cmake \
        wget \
        git \
        vim \
	    nano \
        libx11-dev \
        fish \
        libsparsehash-dev \
        sqlite3 \
        libsqlite3-dev \
        curl \
        libcurl4-openssl-dev \
        # libosmesa6-dev \ 
        # llvm-6.0 \
        # llvm-6.0-tools \
        # freeglut3 \
        # freeglut3-dev \
        # libglfw3-dev \
        # libgles2-mesa-dev \
        python3-opengl \
        pkg-config \
        && \
        DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        software-properties-common \
    && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        python3.8 \
        python3.8-dev \
        && \
    wget -O ~/get-pip.py \
        https://bootstrap.pypa.io/get-pip.py && \
    python3.8 ~/get-pip.py && \
    ln -s /usr/bin/python3.8 /usr/local/bin/python3 && \
    ln -s /usr/bin/python3.8 /usr/local/bin/python && \
        $PIP_INSTALL \
        setuptools \
        && \
# ==================================================================
# python
# ------------------------------------------------------------------
    $PIP_INSTALL \
        numpy \
        torch==1.12.1+cu113 torchvision==0.13.1+cu113 -f https://download.pytorch.org/whl/torch_stable.html \
        scipy \
        matplotlib \
        Cython \
        tqdm \
        provider \
        imageio \
        # tfrecord \
        natsort \
        joblib \
        tensorboard \
        # coolname \
        tabulate \
        # runx \
        ninja \
        # nose \
        # memcnn \
        # dominate \
        # cffi \
        # piexif \
        scikit-image \
        jupyter \
        scikit-learn \
        numba \
        einops \
        opencv-python \
        open3d \
        torchsummary \
        pytictoc \
        # gdown \
        # timm \
        h5py \
        # bz2file \
        # hdf5storage \
        pandas \
        PyYAML \
        Pillow \
        plyfile \
        pyntcloud \
        # pycocotools \
        pickleshare \
        trimesh \
        pyrender \
        # p2j \
        && \
    ldconfig && \
    apt-get clean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/* /tmp/* ~/*

RUN wget https://dl.fbaipublicfiles.com/pytorch3d/packaging/wheels/py38_cu113_pyt1121/pytorch3d-0.7.1-cp38-cp38-linux_x86_64.whl
# RUN git submodule add https://github.com/ThibaultGROUEIX/ChamferDistancePytorch

RUN PIP_INSTALL="python -m pip --no-cache-dir install --upgrade" && \
    $PIP_INSTALL \
        mesh-to-sdf \
        torch-scatter -f https://pytorch-geometric.com/whl/torch-1.12.1+cu113.html \
        torch-sparse -f https://pytorch-geometric.com/whl/torch-1.12.1+cu113.html \
        torch-geometric \
        torch-cluster -f https://pytorch-geometric.com/whl/torch-1.12.1+cu113.html \
        pytorch3d-0.7.1-cp38-cp38-linux_x86_64.whl \
        torch-summary \
        pytorch_warmup


# # RUN MESA_HOME="/mesa-18.3.3"
# ENV LIBRARY_PATH="$LIBRARY_PATH:/mesa-18.3.3/lib"
# ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$/mesa-18.3.3/lib"
# ENV C_INCLUDE_PATH="$C_INCLUDE_PATH:$/mesa-18.3.3/include/"
# ENV CPLUS_INCLUDE_PATH="$CPLUS_INCLUDE_PATH:/mesa-18.3.3/include/"

# RUN GIT_CLONE="git clone --recursive" && \
#     $GIT_CLONE \
#         https://github.com/ThibaultGROUEIX/ChamferDistancePytorch.git && \
#     cd ChamferDistancePytorch/chamfer3D && \
#     python3 setup.py  install && \
#     cd ../..

RUN GIT_CLONE="git clone --recursive" && \
    $GIT_CLONE \
        https://github.com/hjwdzh/Manifold.git && \
    cd Manifold && \
    mkdir build && \
    cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release && \
    make && \
    cd ../.. 


# workdir is where u work in dockers
# copy . /app copies content of ur supposed working dir to the docker wk dir
WORKDIR /app
COPY . /app

# RUN bash point_ops/compile_chamfer.sh

# if this works, try setup of pointnet2ops to reduce compilation time.

RUN adduser -u 5678 --disabled-password --gecos "" appuser && chown -R appuser /app
USER appuser

CMD ["python", "main_pcc.py "]

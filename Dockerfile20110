ARG IMAGE_NAME
FROM ${IMAGE_NAME}:11.0.3-base-ubuntu20.04 as base

ENV NV_CUDA_LIB_VERSION 11.0.3-1

FROM base as base-amd64

ENV NV_NVTX_VERSION 11.0.167-1
ENV NV_LIBNPP_VERSION 11.1.0.245-1
ENV NV_LIBNPP_PACKAGE libnpp-11-0=${NV_LIBNPP_VERSION}
ENV NV_LIBCUSPARSE_VERSION 11.1.1.245-1

ENV NV_LIBCUBLAS_PACKAGE_NAME libcublas-11-0
ENV NV_LIBCUBLAS_VERSION 11.2.0.252-1
ENV NV_LIBCUBLAS_PACKAGE ${NV_LIBCUBLAS_PACKAGE_NAME}=${NV_LIBCUBLAS_VERSION}

ENV NV_LIBNCCL_PACKAGE_NAME libnccl2
ENV NV_LIBNCCL_PACKAGE_VERSION 2.15.5-1
ENV NCCL_VERSION 2.15.5-1
ENV NV_LIBNCCL_PACKAGE ${NV_LIBNCCL_PACKAGE_NAME}=${NV_LIBNCCL_PACKAGE_VERSION}+cuda11.0

FROM base-amd64

ARG TARGETARCH

LABEL maintainer "NVIDIA CORPORATION <cudatools@nvidia.com>"

RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-libraries-11-0=${NV_CUDA_LIB_VERSION} \
    ${NV_LIBNPP_PACKAGE} \
    cuda-nvtx-11-0=${NV_NVTX_VERSION} \
    libcusparse-11-0=${NV_LIBCUSPARSE_VERSION} \
    ${NV_LIBCUBLAS_PACKAGE} \
    ${NV_LIBNCCL_PACKAGE} \
    && rm -rf /var/lib/apt/lists/*

# Keep apt from auto upgrading the cublas and nccl packages. See https://gitlab.com/nvidia/container-images/cuda/-/issues/88
RUN apt-mark hold ${NV_LIBCUBLAS_PACKAGE_NAME} ${NV_LIBNCCL_PACKAGE_NAME}

#--upgrade
RUN APT_INSTALL="apt-get install -y --no-install-recommends" && \
    PIP_INSTALL="python -m pip --no-cache-dir install" && \
    GIT_CLONE="git clone --depth 10" && \
    apt-get update && apt-get install -y --no-install-recommends &&\
     DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        build-essential \
        ca-certificates \
        cmake \
        wget \
        git \
        vim \
	    nano \
        libx11-dev \
        fish \
        libsparsehash-dev \
        sqlite3 \
        libsqlite3-dev \
        curl \
        libcurl4-openssl-dev \
        python3-opengl \
        pkg-config \
        && \
        DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        software-properties-common \
    && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        python3.8 \
        python3.8-dev \
        python3.8-distutils \
        # python3-pip \
        # python-wheel \
        && \
    wget -O ~/get-pip.py \
        https://bootstrap.pypa.io/get-pip.py && \
    python3.8 ~/get-pip.py && \
    ln -s /usr/bin/python3.8 /usr/local/bin/python3 && \
    ln -s /usr/bin/python3.8 /usr/local/bin/python && \
        $PIP_INSTALL \
        setuptools \ 
        numpy \
        scipy \
        matplotlib \
        Cython \
        tqdm \
        provider \
        imageio \
        # tfrecord \
        natsort \
        joblib \
        tensorboard \
        coolname \
        tabulate \
        runx \
        ninja \
        nose \
        # memcnn \
        dominate \
        # cffi \
        # piexif \
        scikit-image \
        jupyter \
        sklearn \
        # numba \
        einops \
        opencv-python \
        open3d \
        torchsummary \
        # pytictoc \
        gdown \
        timm \
        h5py \
        bz2file \
        hdf5storage \
        pandas \
        PyYAML \
        Pillow \
        plyfile \
        pyntcloud \
        # pycocotools \
        pickleshare \
        trimesh \
        pyrender \
        # p2j \
        mesh-to-sdf \
        && \
    ldconfig && \
    apt-get clean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/* /tmp/* ~/*

RUN PIP_INSTALL="python -m pip --no-cache-dir install" && \
    $PIP_INSTALL \
    torch==1.7.1 torchvision==0.8.2 -f https://download.pytorch.org/whl/torch_stable.html \
    # torch==1.6.0+cu101 torchvision==0.7.0+cu101 -f https://download.pytorch.org/whl/torch_stable.html \
    # torch-scatter -f https://pytorch-geometric.com/whl/torch-1.6.0+cu101.html \
    # torch-sparse -f https://pytorch-geometric.com/whl/torch-1.6.0+cu101.html \
    # torch-geometric \
    # torch-cluster -f https://pytorch-geometric.com/whl/torch-1.6.0+cu101.html \
# RUN PIP_INSTALL="python -m pip --no-cache-dir install --upgrade" && \
#     GIT_CLONE="git clone --recurse-submodules" && \
#     $GIT_CLONE \
#         https://github.com/rubenwiersma/deltaconv.git && \
#     cd deltaconv && \
#     $PIP_INSTALL \
#         ./ \
#         # pyOpenGL_accelerate
        && \
    curl -LO https://github.com/NVIDIA/cub/archive/1.10.0.tar.gz && \
    tar xzf 1.10.0.tar.gz

# workdir is where u work in dockers
# copy . /app copies content of ur supposed working dir to the docker wk dir
WORKDIR /app
COPY . /app

ENV CUB_HOME=$PWD/cub-1.10.0
RUN PIP_INSTALL="python -m pip --no-cache-dir install --upgrade" && \
    $PIP_INSTALL \
        "git+https://github.com/facebookresearch/pytorch3d.git@stable"

# ENV PATH="$PATH:/usr/lib/llvm-6.0/bin"
# ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/llvm-6.0/lib"

RUN adduser -u 5678 --disabled-password --gecos "" appuser && chown -R appuser /app
USER appuser

RUN echo "CUB_HOME env path: ${CUB_HOME}"
RUN python -c "import torch; print(torch.__version__)" 
RUN python -c "import torch; print(torch.version.cuda)" 
RUN echo "CUB_HOME env path: ${PATH}" 
# RUN echo "CUB_HOME env path: ${CPATH}" 

CMD ["python", "dataset.py "]
